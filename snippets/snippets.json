{
  "Playwright module": {
    "prefix": "pw-import",
    "body": "const playwright = require('playwright');",
    "description": "Imports Playwright's full module"
  },
  "Import Chromium": {
    "prefix": "pw-import-chromium",
    "body": "const { chromium } = require('playwright');",
    "description": "Imports Playwright's Chromium module"
  },
  "Import Firefox": {
    "prefix": "pw-import-firefox",
    "body": "const { firefox } = require('playwright');",
    "description": "Imports Playwright's Firefox module"
  },
  "Import Webkit": {
    "prefix": "pw-import-webkit",
    "body": "const { webkit } = require('playwright');",
    "description": "Imports Playwright's Webkit module"
  },
  "Import devices": {
    "prefix": "pw-import-devices",
    "body": "const { devices } = require('playwright');",
    "description": "Imports the device descriptors module"
  },
  "Connect Chromium": {
    "prefix": "pw-connect-chromium",
    "body": ["const ${1:browser} = await chromium.connect({", "\twsEndpoint: '$0'", "});"],
    "description": "Attaches Playwright to an existing Chromium instance"
  },
  "Launch Chromium": {
    "prefix": "pw-launch-chromium",
    "body": "const ${1:browser} = await chromium.launch($0);",
    "description": "Creates a Chromium instance and attaches Playwright to it"
  },
  "Launch Chromium Server": {
    "prefix": "pw-launchServer-chromium",
    "body": "const ${1:browserServer} = await chromium.launchServer();",
    "description": "Creates a Chromium server instance the client can connect to"
  },
  "Connect Firefox": {
    "prefix": "pw-connect-firefox",
    "body": ["const ${1:browser} = await firefox.connect({", "\twsEndpoint: '$0'", "});"],
    "description": "Attaches Playwright to an existing Firefox instance"
  },
  "Launch Firefox": {
    "prefix": "pw-launch-firefox",
    "body": "const ${1:browser} = await firefox.launch($0);",
    "description": "Creates a Firefox instance and attaches Playwright to it"
  },
  "Launch Firefox Server": {
    "prefix": "pw-launchServer-firefox",
    "body": "const ${1:browserServer} = await firefox.launchServer();",
    "description": "Creates a Firefox server instance the client can connect to"
  },
  "Connect Webkit": {
    "prefix": "pw-connect-webkit",
    "body": ["const ${1:browser} = await webkit.connect({", "\twsEndpoint: '$0'", "});"],
    "description": "Attaches Playwright to an existing Webkit instance"
  },
  "Launch Webkit": {
    "prefix": "pw-launch-webkit",
    "body": "const ${1:browser} = await webkit.launch($0);",
    "description": "Creates a Webkit instance and attaches Playwright to it"
  },
  "Launch Webkit Server": {
    "prefix": "pw-launchServer-webkit",
    "body": "const ${1:browserServer} = await webkit.launchServer();",
    "description": "Creates a Webkit server instance the client can connect to"
  },
  "browser.contexts": {
    "prefix": "pw-browser-contexts",
    "body": "browser.contexts();",
    "description": "Returns an array of all open browser contexts"
  },
  "browser.close": {
    "prefix": "pw-browser-close",
    "body": "await browser.close();",
    "description": "Closes the browser and all of its pages when it's launched, or clears all created contexts belonging to this browser and disconnects from the browser server when it's connected to"
  },
  "browser.isConnected": {
    "prefix": "pw-browser-isConnected",
    "body": "browser.isConnected();",
    "description": "Indicates that the browser is connected"
  },
  "browser.newContext": {
    "prefix": "pw-browser-newContext",
    "body": "const ${1:context} = await browser.newContext();",
    "description": "Creates a new browser context"
  },
  "browser.newPage": {
    "prefix": "pw-browser-newPage",
    "body": "const ${1:page} = await browser.newPage();",
    "description": "Creates a new page in a new browser context"
  },
  "browser.version": {
    "prefix": "pw-browser-version",
    "body": "browser.version();",
    "description": "Returns the browser version"
  },
  "browser.on('disconnected')": {
    "prefix": "pw-browser-on-disconnected",
    "body": ["browser.on('disconnected', () => {", "\t$0", "});"],
    "description": "Emitted when the browser gets disconnected from the browser application"
  },
  "browserContext.close": {
    "prefix": "pw-browserContext-close",
    "body": "await context.close();",
    "description": "Closes the browser context including all of its pages"
  },
  "browserContext.cookies": {
    "prefix": "pw-browserContext-cookies",
    "body": "await context.cookies();",
    "description": "Returns all cookies of the browser context"
  },
  "browserContext.newPage": {
    "prefix": "pw-browserContext-newPage",
    "body": "const ${1:page} = await context.newPage();",
    "description": "Creates a new page in the browser context"
  },
  "browserContext.pages": {
    "prefix": "pw-browserContext-pages",
    "body": "await context.pages();",
    "description": "Returns all pages of the browser context"
  },
  "browserContext.route": {
    "prefix": "pw-browserContext-route",
    "body": "await context.route('$1', ${2:route} => {$0});",
    "description": "Modifies the network request that made by any page within the browser context"
  },
  "browserContext.unroute": {
    "prefix": "pw-browserContext-unroute",
    "body": "await context.unroute('$0');",
    "description": "Removes registered route of a page withing the browser context"
  },
  "browserContext.on('close')": {
    "prefix": "pw-browserContext-on-close",
    "body": ["context.on('close', () => {", "\t$0", "});"],
    "description": "Emitted when the browser context is closed (manually or when the browser application is crashed)"
  },
  "browserContext.on('page')": {
    "prefix": "pw-browserContext-on-page",
    "body": ["context.on('page', () => {", "\t$0", "});"],
    "description": "Emitted when a page is created within the browser context"
  },
  "browserServer.close": {
    "prefix": "pw-browserServer-close",
    "body": "await browserServer.close();",
    "description": "Closes the browser and makes sure the process is terminated"
  },
  "browserServer.kill": {
    "prefix": "pw-browserServer-kill",
    "body": "await browserServer.kill();",
    "description": "Kills the browser process and waits until the process exits"
  },
  "browserServer.on('close')": {
    "prefix": "pw-browserServer-on-close",
    "body": ["browserServer.on('close', () => {", "\t$0", "});"],
    "description": "Emitted when the browser server is closed"
  },
  "page.$": {
    "prefix": "pw-page-$",
    "body": "await page.$('$0');",
    "description": "Finds a matching element by a query selector within the page"
  },
  "page.$$": {
    "prefix": "pw-page-$$",
    "body": "await page.$$('$0');",
    "description": "Finds all matching elements by a query selector within the page"
  },
  "page.$eval": {
    "prefix": "pw-page-$eval",
    "body": ["await page.$eval('$2', element => {", "\t${3:console.log(element);}", "});"],
    "description": "Finds a matching element by a query selector within the page and passes the result as the first argument to a function"
  },
  "page.$$eval": {
    "prefix": "pw-page-$$eval",
    "body": ["await page.$$eval('$2', elements => {", "\t${3:console.log(elements);}", "});"],
    "description": "Finds all matching elements by a query selector within the page and passes the results as the first argument to a function"
  },
  "page.bringToFront": {
    "prefix": "pw-page-bringToFront",
    "body": "await page.bringToFront();",
    "description": "Actives the corresponding tab of the page"
  },
  "page.click": {
    "prefix": "pw-page-click",
    "body": "await page.click('$0');",
    "description": "Clicks in the center of an element within the page"
  },
  "page.close": {
    "prefix": "pw-page-close",
    "body": "await page.close();",
    "description": "Closes the page"
  },
  "page.content": {
    "prefix": "pw-page-content",
    "body": "await page.content();",
    "description": "Returns the full HTML contents of the page"
  },
  "page.dblclick": {
    "prefix": "pw-page-dblclick",
    "body": "await page.dblclick('$0');",
    "description": "Clicks twice in the center of an element within the page"
  },
  "page.emulateMedia": {
    "prefix": "pw-page-emulateMedia",
    "body": "await page.emulateMedia({ media: ${2|'screen','print',null|} });",
    "description": "Emulates a given CSS media feature or type within the page"
  },
  "page.evaluate": {
    "prefix": "pw-page-evaluate",
    "body": ["await page.evaluate(() => {", "\t$0", "});"],
    "description": "Evaluates a function in the page context"
  },
  "page.fill": {
    "prefix": "pw-page-fill",
    "body": "await page.fill('$1', '$2');",
    "description": "Focuses an input element within the page and inserts to it the given value"
  },
  "page.focus": {
    "prefix": "pw-page-focus",
    "body": "await page.focus('$0');",
    "description": "Focuses an element within the page"
  },
  "page.goBack": {
    "prefix": "pw-page-goBack",
    "body": "await page.goBack();",
    "description": "Navigates to the previous page in the history"
  },
  "page.goForward": {
    "prefix": "pw-page-goForward",
    "body": "await page.goForward();",
    "description": "Navigates to the next page in the history"
  },
  "page.goto": {
    "prefix": "pw-page-goto",
    "body": "await page.goto('$0');",
    "description": "Navigates the page to a URL"
  },
  "page.hover": {
    "prefix": "pw-page-hover",
    "body": "await page.hover('$0');",
    "description": "Hovers over the center of an element within the page"
  },
  "page.keyboard.down": {
    "prefix": "pw-page-keyboard-down",
    "body": "await page.keyboard.down('$0');",
    "description": "Dispatches a `keydown` event within the page"
  },
  "page.keyboard.press": {
    "prefix": "pw-page-keyboard-press",
    "body": "await page.keyboard.press('$0');",
    "description": "Presses on a specific key within the page"
  },
  "page.keyboard.sendCharacter": {
    "prefix": "pw-page-keyboard-sendCharacter",
    "body": "await page.keyboard.sendCharacter('$0');",
    "description": "Dispatches a `keypress` and `input` event within the page"
  },
  "page.keyboard.type": {
    "prefix": "pw-page-keyboard-type",
    "body": "await page.keyboard.type('$0');",
    "description": "Types a text into a focused element within the page"
  },
  "page.keyboard.up": {
    "prefix": "pw-page-keyboard-up",
    "body": "await page.keyboard.up('$0');",
    "description": "Dispatches a `keyup` event within the page"
  },
  "page.metrics": {
    "prefix": "pw-page-metrics",
    "body": "const ${1:metrics} = await page.metrics();",
    "description": "Returns runtime metrics of the page"
  },
  "page.mouse.click": {
    "prefix": "pw-page-mouse-click",
    "body": "await page.mouse.click(${2:0}, ${3:100});",
    "description": "Clicks on area within the page by coordinates"
  },
  "page.mouse.down": {
    "prefix": "pw-page-mouse-down",
    "body": "await page.mouse.down();",
    "description": "Dispatches a `mousedown` event within the page"
  },
  "page.mouse.move": {
    "prefix": "pw-page-mouse-move",
    "body": "await page.mouse.move();",
    "description": "Dispatches a `mousemove` event within the page"
  },
  "page.mouse.up": {
    "prefix": "pw-page-mouse-up",
    "body": "await page.mouse.up();",
    "description": "Dispatches a `mouseup` event within the page"
  },
  "page.pdf": {
    "prefix": "pw-page-pdf",
    "body": "await page.pdf({ path: '${2:page.pdf}', format: '${3|A4,Letter,Legal,Tabloid,Ledger,A0,A1,A2,A3,A5,A6|}' });",
    "description": "Generates a PDF from the page"
  },
  "page.reload": {
    "prefix": "pw-page-reload",
    "body": "await page.reload();",
    "description": "Reloads the page"
  },
  "page.screenshot": {
    "prefix": "pw-page-screenshot",
    "body": "await page.screenshot({ path: '${2:page.png}', fullPage: '${3|true,false|}' });",
    "description": "Generates a screenshot of the page"
  },
  "page.title": {
    "prefix": "pw-page-title",
    "body": "await page.title();",
    "description": "Returns the page's title"
  },
  "page.url": {
    "prefix": "pw-page-url",
    "body": "await page.url();",
    "description": "Returns the page's URL"
  },
  "page.waitFor": {
    "prefix": "pw-page-waitFor",
    "body": "await page.waitFor($0);",
    "description": "Waits until an element/predicate/timeout within the page is resolved"
  },
  "page.waitForFunction": {
    "prefix": "pw-page-waitForFunction",
    "body": "await page.waitForFunction($0);",
    "description": "Waits until a predicate within the page returns a truthy value"
  },
  "page.waitForNavigation": {
    "prefix": "pw-page-waitForNavigation",
    "body": "await page.waitForNavigation();",
    "description": "Waits until the page navigates to a new URL or reloads"
  },
  "page.waitForRequest": {
    "prefix": "pw-page-waitForRequest",
    "body": "await page.waitForRequest($0);",
    "description": "Waits until a request by URL/predicate is resolved"
  },
  "page.waitForResponse": {
    "prefix": "pw-page-waitForResponse",
    "body": "await page.waitForResponse($0);",
    "description": "Waits until a response by URL/predicate is resolved"
  },
  "page.waitForSelector": {
    "prefix": "pw-page-waitForSelector",
    "body": "await page.waitForSelector('$0');",
    "description": "Waits until an element (by selector) is appeared in the page"
  },
  "page.waitForXPath": {
    "prefix": "pw-page-waitForXPath",
    "body": "await page.waitForXPath('$0');",
    "description": "Waits until an element (by XPath) is appeared in the page"
  },
  "page.waitForFileChooser": {
    "prefix": "pw-page-waitForFileChooser",
    "body": "await page.waitForFileChooser();",
    "description": "Waits until a file chooser is requested in the page"
  },
  "page.on('close')": {
    "prefix": "pw-page-on-close",
    "body": ["page.on('close', () => {", "\t${0:console.log('Closed');}", "});"],
    "description": "Emitted when the page is closed"
  },
  "page.on('console')": {
    "prefix": "pw-page-on-console",
    "body": ["page.on('console', msg => {", "\t${0:console.log(msg.args());}", "});"],
    "description": "Emitted when a script within the page calls one of console API methods"
  },
  "page.on('dialog')": {
    "prefix": "pw-page-on-dialog",
    "body": ["page.on('dialog', dialog => {", "\t${0:console.log(dialog.message());}", "});"],
    "description": "Emitted when a dialog appears in the page"
  },
  "page.on('domcontentloaded')": {
    "prefix": "pw-page-on-domcontentloaded",
    "body": [
      "page.on('domcontentloaded', () => {",
      "\t${0:console.log('DOMContentLoaded is dispatched');}",
      "});"
    ],
    "description": "Emitted when the `DOMContentLoaded` event of the page is dispatched"
  },
  "page.on('error')": {
    "prefix": "pw-page-on-error",
    "body": ["page.on('error', error => {", "\t${0:console.log(error);}", "});"],
    "description": "Emitted when the page crashes"
  },
  "page.on('frameattached')": {
    "prefix": "pw-page-on-frameattached",
    "body": ["page.on('frameattached', frame => {", "\t${0:console.log(frame.content());}", "});"],
    "description": "Emitted when a frame within the page is attached"
  },
  "page.on('framedetached')": {
    "prefix": "pw-page-on-framedetached",
    "body": ["page.on('framedetached', frame => {", "\t${0:console.log(frame.content());}", "});"],
    "description": "Emitted when a frame within the page is detached"
  },
  "page.on('framenavigated')": {
    "prefix": "pw-page-on-framenavigated",
    "body": ["page.on('framenavigated', frame => {", "\t${0:console.log(frame.content());}", "});"],
    "description": "Emitted when a frame within the page is navigated to a new url"
  },
  "page.on('load')": {
    "prefix": "pw-page-on-load",
    "body": ["page.on('load', () => {", "\t${0:console.log('Loaded');}", "});"],
    "description": "Emitted when the `load` event of the page is dispatched"
  },
  "page.on('metrics')": {
    "prefix": "pw-page-on-metrics",
    "body": ["page.on('metrics', result => {", "\t${0:console.log(result.metrics);}", "});"],
    "description": "Emitted when a script within the page invokes `console.timeStamp`"
  },
  "page.on('pageerror')": {
    "prefix": "pw-page-on-pageerror",
    "body": ["page.on('pageerror', error => {", "\t${0:console.log(error);}", "});"],
    "description": "Emitted when an uncaught exception happens within the page"
  },
  "page.on('popup')": {
    "prefix": "pw-page-on-popup",
    "body": ["page.on('popup', page => {", "\t${0:console.log(page.content());}", "});"],
    "description": "Emitted when the page opens a new tab or window"
  },
  "page.on('request')": {
    "prefix": "pw-page-on-request",
    "body": ["page.on('request', request => {", "\t${0:console.log(request.url());}", "});"],
    "description": "Emitted when the request is issued by the page"
  },
  "page.on('requestfailed')": {
    "prefix": "pw-page-on-requestfailed",
    "body": ["page.on('requestfailed', request => {", "\t${0:console.log(request.url());}", "});"],
    "description": "Emitted when a request fails"
  },
  "page.on('requestfinished')": {
    "prefix": "pw-page-on-requestfinished",
    "body": ["page.on('requestfailed', request => {", "\t${0:console.log(request.url());}", "});"],
    "description": "Emitted when a request finishes successfully"
  },
  "page.on('response')": {
    "prefix": "pw-page-on-response",
    "body": ["page.on('response', response => {", "\t${0:console.log(response.status());}", "});"],
    "description": "Emitted when a response is received"
  },
  "page.on('workercreated')": {
    "prefix": "pw-page-on-workercreated",
    "body": ["page.on('workercreated', worker => {", "\t${0:console.log(worker.url());}", "});"],
    "description": "Emitted when a dedicated `WebWorker` is spawned by the page"
  },
  "page.on('workerdestroyed')": {
    "prefix": "pw-page-on-workerdestroyed",
    "body": ["page.on('workerdestroyed', worker => {", "\t${0:console.log(worker.url());}", "});"],
    "description": "Emitted when a dedicated `WebWorker` is terminated"
  }
}
