{
  "Playwright module": {
    "prefix": "pw-import",
    "body": "const playwright = require('playwright');",
    "description": "Imports Playwright's full module"
  },
  "Import Chromium": {
    "prefix": "pw-import-chromium",
    "body": "const { chromium } = require('playwright');",
    "description": "Imports Playwright's Chromium module"
  },
  "Import Firefox": {
    "prefix": "pw-import-firefox",
    "body": "const { firefox } = require('playwright');",
    "description": "Imports Playwright's Firefox module"
  },
  "Import Webkit": {
    "prefix": "pw-import-webkit",
    "body": "const { webkit } = require('playwright');",
    "description": "Imports Playwright's Webkit module"
  },
  "Import devices": {
    "prefix": "pw-import-devices",
    "body": "const { devices } = require('playwright');",
    "description": "Imports the device descriptors module"
  },
  "Connect Chromium": {
    "prefix": "pw-connect-chromium",
    "body": ["const ${1:browser} = await chromium.connect({", "\twsEndpoint: '$0'", "});"],
    "description": "Attaches Playwright to an existing Chromium instance"
  },
  "Launch Chromium": {
    "prefix": "pw-launch-chromium",
    "body": "const ${1:browser} = await chromium.launch($0);",
    "description": "Creates a Chromium instance and attaches Playwright to it"
  },
  "Launch Chromium Server": {
    "prefix": "pw-launchServer-chromium",
    "body": "const ${1:browserServer} = await chromium.launchServer();",
    "description": "Creates a Chromium server instance the client can connect to"
  },
  "Connect Firefox": {
    "prefix": "pw-connect-firefox",
    "body": ["const ${1:browser} = await firefox.connect({", "\twsEndpoint: '$0'", "});"],
    "description": "Attaches Playwright to an existing Firefox instance"
  },
  "Launch Firefox": {
    "prefix": "pw-launch-firefox",
    "body": "const ${1:browser} = await firefox.launch($0);",
    "description": "Creates a Firefox instance and attaches Playwright to it"
  },
  "Launch Firefox Server": {
    "prefix": "pw-launchServer-firefox",
    "body": "const ${1:browserServer} = await firefox.launchServer();",
    "description": "Creates a Firefox server instance the client can connect to"
  },
  "Connect Webkit": {
    "prefix": "pw-connect-webkit",
    "body": ["const ${1:browser} = await webkit.connect({", "\twsEndpoint: '$0'", "});"],
    "description": "Attaches Playwright to an existing Webkit instance"
  },
  "Launch Webkit": {
    "prefix": "pw-launch-webkit",
    "body": "const ${1:browser} = await webkit.launch($0);",
    "description": "Creates a Webkit instance and attaches Playwright to it"
  },
  "Launch Webkit Server": {
    "prefix": "pw-launchServer-webkit",
    "body": "const ${1:browserServer} = await webkit.launchServer();",
    "description": "Creates a Webkit server instance the client can connect to"
  },
  "browser.contexts": {
    "prefix": "pw-browser-contexts",
    "body": "browser.contexts();",
    "description": "Returns an array of all open browser contexts"
  },
  "browser.close": {
    "prefix": "pw-browser-close",
    "body": "await browser.close();",
    "description": "Closes the browser and all of its pages when it's launched, or clears all created contexts belonging to this browser and disconnects from the browser server when it's connected to"
  },
  "browser.isConnected": {
    "prefix": "pw-browser-isConnected",
    "body": "browser.isConnected();",
    "description": "Indicates that the browser is connected"
  },
  "browser.newContext": {
    "prefix": "pw-browser-newContext",
    "body": "const ${1:context} = await browser.newContext();",
    "description": "Creates a new browser context"
  },
  "browser.newPage": {
    "prefix": "pw-browser-newPage",
    "body": "const ${1:page} = await browser.newPage();",
    "description": "Resolves a new page in a new browser context"
  },
  "browser.version": {
    "prefix": "pw-browser-version",
    "body": "browser.version();",
    "description": "Returns the browser version"
  },
  "browser.on('disconnected')": {
    "prefix": "pw-browser-on-disconnected",
    "body": ["browser.on('disconnected', () => {", "\t$0", "});"],
    "description": "Emitted when the browser gets disconnected from the browser application"
  }
}
